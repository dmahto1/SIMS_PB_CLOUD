HA$PBExportHeader$f_cleanse_xml.srf
$PBExportComments$Remove any special characters from XML Document
global type f_cleanse_xml from function_object
end type

forward prototypes
global function string f_cleanse_xml (string asxml)
end prototypes

global function string f_cleanse_xml (string asxml);
String	lsXML, lsChar
Long	llLen, llPOs, llCount, llArrayPOs
String	lsConvert[], lsFrom, lsTo

//From/to values seperated by |
lsConvert[1] =  "$$HEX1$$c000$$ENDHEX$$|&&#192;" /*Agrave*/
lsConvert[2] =  "$$HEX1$$c400$$ENDHEX$$|&&#196;" /*Auml*/
lsConvert[3] =  "$$HEX1$$c100$$ENDHEX$$|&&#193;" /*Aacute*/
lsConvert[4] = "$$HEX1$$c800$$ENDHEX$$|&&#200;" /*Egrave*/
lsConvert[5] = "$$HEX1$$c900$$ENDHEX$$|&&#201;" /*Eacute*/
lsConvert[6] = "$$HEX1$$ca00$$ENDHEX$$|&&#202;" /*Ecirc*/
lsConvert[7] = "$$HEX1$$d200$$ENDHEX$$|&&#210;" /*Ograve*/
lsConvert[8] = "$$HEX1$$d300$$ENDHEX$$|&&#211;" /*Oacute*/
lsConvert[9] = "$$HEX1$$d600$$ENDHEX$$|&&#214;" /*Ouml*/
lsConvert[10] = "$$HEX1$$d400$$ENDHEX$$|&&#212;" /*Ocirc*/
lsConvert[11] = "$$HEX1$$e000$$ENDHEX$$|&&#224;" /*agrave*/
lsConvert[12] = "$$HEX1$$e100$$ENDHEX$$|&&#225;" /*aacute*/
lsConvert[13] = "$$HEX1$$e200$$ENDHEX$$|&&#226;" /*acirc*/
lsConvert[14] = "$$HEX1$$e400$$ENDHEX$$|&&#228;" /*auml*/
lsConvert[15] = "$$HEX1$$e800$$ENDHEX$$|&&#232;" /*egrave*/
lsConvert[16] = "$$HEX1$$e900$$ENDHEX$$|&&#233;" /*eacute*/
lsConvert[17] = "$$HEX1$$ea00$$ENDHEX$$|&&#234;" /*ecirc*/


SetPointer(Hourglass!)

lsXML = asXML

//we need to fix any "&" characters (i.e. K&N)
llPos = Pos(lsXml,"&",1)
Do While llPos > 0
	
	lsXml = Replace(lsXML,llPos,1,"&amp;")
	llPos +=3
	If llPos > Len(lsXml) Then
		llPOs = 0
	Else
		llPos = Pos(lsXml,"&",llPos)
	End If
	
Loop


For llArrayPos = 1 to Upperbound(lsConvert)

	lsFrom = Left(lsConvert[llArrayPOs], (Pos(lsConvert[llArrayPOs],'|') - 1))
	lsTo = Mid(lsConvert[llArrayPos],(Pos(lsConvert[llArrayPOs],'|') + 2),999)
	
	w_main.SetMicroHelp("cleansing " + lsFrom)

	llPOs = Pos(lsXML,lsFrom,1)
	Do While llPos > 0
		lsXML = Replace(lsXML,llPos,1,lsTo)
		llPos ++
		If llPos > Len(lsXML) Then
			llPos = 0
		Else
			llPOs = Pos(lsXML,lsFrom,llPOs)
		End If
	Loop
	
Next



w_main.SetMicroHelp("Ready")
SetPointer(Arrow!)

REturn lsXML
end function

